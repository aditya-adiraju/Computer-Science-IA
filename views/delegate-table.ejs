<%- include('./layouts/header') %>
<!DOCTYPE html>
<html>
<style>
* {
  box-sizing: border-box;
}

table {
        display:block;
        align-self: center;
        margin-top: 32px;
        max-width: 90%;
        min-width: 5%;
        overflow-x: scroll;
        border: thick solid black ;
        border-spacing: 0;
        padding: 16px;
        border-radius: 16px;
    }
    table th{
        padding: 10px;
        border: thin solid black;
        background-color: #3798d5;
        color: white;
    }
    table td{
        padding: 10px;
        border: thin solid black
    }
/*the container must be positioned relative:*/
.suggestions {
  position: relative;
  display: inline-block;
}


.suggestions-suggestion {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the suggestions suggestion to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.suggestions-suggestion div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.suggestions-suggestion div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the suggestion using the arrow keys:*/
.suggestions-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
</style>
<script>

class Node {
    constructor(){
        this.children = {}
        this.last = false //indicates end of word
    }
}

class TrieAutocomplete{
    constructor(wordList){
        const root = new Node()
        for (const word of wordList){
            this.insertNode(root, word)
        }
        this.root = root
    }

    insertNode(node, word){
        for(const char of word){
          // creates node if it doesn't exist already
            if (node.children[char] === undefined) {
                node.children[char] = new Node()
            }
            node = node.children[char]
        }
        node.last = true;
    }

    beginsWith(word){
        let node = this.root
        let foundFlag = true
        let result = ''

        for (const char of word){

            if (node.children[char]) {
                node = node.children[char]
                result += char;
            }
            //Case-insenstive search
            else if (node.children[char.toUpperCase()]){
                node = node.children[char.toUpperCase()]
                result += char.toUpperCase()
            }
            else{
                foundFlag = false;
                break;
                //exit loop if not found
            }
        }
        if (foundFlag) {
          return{
            node: node,
            result
          }
        } else{
          return{
            node: null,
            result
          }
        }
    }

    breadthFirstSearch(searchQuery){

        const {node, result} = this.beginsWith(searchQuery)

        if (!node){
            return []
        }

        const list = []
        // queue stores possible Trie results or traversals
        const queue = [{node, result}]
        const possibleWords = []
        //if current node is a word, add to suggestion list
        if (node.last){
            list.push(result)
        }
        
        while (queue.length){
            const {node, result} = queue.shift()
            // array.shift() removes and returns the element at index 0
            // queue.shift is a dequeue operation
            // 
            for(const child in node.children){
                if(node.children[child].last){
                    possibleWords.push(result + child)
                }
                //queue.push() acts as enqueue operation 
                queue.push({
                    node: node.children[child],
                    result: result + child
                })

            }
        }
        return list.concat(possibleWords)
    }
}
function submitForm(){  
    const trie = new TrieAutocomplete(delegates)
    var arr = trie.breadthFirstSearch(document.myForm.delegate.value.trim())
    document.myForm.delegate.value = arr.join()
    document.myForm.submit()
}
  //Displays Trie results with a drop down data list
  function autocomplete(input, list) {


input.addEventListener("input", function(e) {
    var outerDiv, innerDiv, i, query = this.value
    closeList() //close previous lists 

    if (!query) { return false}
    
    outerDiv = document.createElement("DIV")
    outerDiv.setAttribute("id", this.id + "suggestions-list")
    outerDiv.setAttribute("class", "suggestions-suggestion")
    this.parentNode.appendChild(outerDiv)

    const trie = new TrieAutocomplete(list)
    var arr = trie.breadthFirstSearch(input.value)

    for (var i = 0; i < arr.length; i++) {
      //Generating individual suggestions
      if (arr[i].substr(0, query.length).toUpperCase() == query.toUpperCase()) {
        innerDiv = document.createElement("DIV")
        innerDiv.innerHTML = "<b>" + arr[i].substr(0, query.length) + "</b>"
        innerDiv.innerHTML += arr[i].substr(query.length)
        innerDiv.innerHTML += "<input type='hidden' value='" + arr[i] + "'>"
        innerDiv.addEventListener("click", function(e) {
            input.value = this.getElementsByTagName("input")[0].value
            closeList()
        })
        outerDiv.appendChild(innerDiv)
      }
    }
})


function closeList(elmnt) {
  var x = document.getElementsByClassName("suggestions-suggestion");
      for (var i = 0; i < x.length; i++) {
        if (elmnt != x[i] && elmnt != input) {
          x[i].parentNode.removeChild(x[i]);
        }
      }
}

document.addEventListener("click", function (e) {
    closeList(e.target)
})
}
</script>
<body>
  <h1 style="text-align:center;" >CISMUN ONLINE DATABASE</h1>
  <h2 style="text-align:center;">Delegate List for supervisor ID </h2>
  <form id="myForm" name="myForm" method="post" action="/display-delegates" autocomplete="off"  >
    <div class="suggestions" style="width:300px;">
      <input id="delegate" type="text" name="delegate" placeholder="Search..." required>
      <button class="button" onclick="submitForm()">SEARCH</button>
    </div>
  </form>
  <table class="table">
    <thead>
      <th>ID</th>
      <th>Name</th>
      <th>Delegation</th>
      <th>Committee</th>
      <th>DOB</th>
      <th>Nationality</th>
      <th>School</th>
      <th>Supervisor ID</th>
    </thead>
    <tbody>
      <% delegates.forEach(delegate => { %> 
        <% if (delegate) { %>    
          <tr>
            <td><%= delegate.id %></td>
            <td><%= delegate.name %></td>
            <td><%= delegate.delegation %></td>
            <td><%= delegate.committee %></td>
            <td><%= delegate.dob %></td>
            <td><%= delegate.nationality %></td>
            <td><%= delegate.school %></td>
            <td><%= delegate.supervisor_id %></td>
          </tr>
        <% } %>   
      <% }) %>
    </tbody>
  </table>
<script>

var allDelegates = <%- JSON.stringify(names) %>;
autocomplete(document.getElementById("delegate"), allDelegates.filter(Boolean));

</script>

</body>
</html>
